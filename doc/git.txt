
三个重要文件 HEAD config resf/
三个重要对象 commit tree blob

mv files Files  给文件重命名的简便方法
删除文件（在工作区删除，并在暂存区记录已删除该文件） git rm 文件名 




比较工作区和暂存区的差异  git diff  &  	 git diff [-- 文件名/文件名]
比较暂存区和HEAD的差异 	 git diff --cached

查看不同提交的文件差异 git diff 分支A/提交A 分支/提交B  [-- 文件名或目录]  



将暂存区恢复成和HEAD一样 git reset HEAD [-- 文件名 文件名]

将工作区区恢复成和暂存区一样 git checkout [-- 文件名]

消除最近几次的提交，且工作区和暂存区都恢复成该提交的状态  git reset --hard 提交id （慎用）


紧急加塞任务

	将工作区变更保留到stash区，工作区将和HEDA一致 git stash 

	查看stash区 git stash list

	恢复工作区，保留stash区记录 git stash apply 

	恢复工作区，删除stash区记录 git stash pop
	
	
git忽略文件 不需要版本管理

.gitignore文件  

*为通配符 比如 *.jar ;
 
/表示目录 比如 doc/ 忽略doc目录下的所有文件，如果有个文件名为doc git依旧会管理
		     doc 忽略doc目录下的所有文件，如果有个文件名为doc git也会忽略
			 
			 
			 
			 
git仓库备份到本地

git fetch 只会从远端仓库拉到本地，但是并不会合并
git pull  只会从远端仓库拉到本地，但是并不会合并



多人单分支集成协作

多人修改了不同的文件或者同文件不同地方
	git fetch  拉远端代码 
	git merge  自动合并	
	git push   推送到远端
	
多人修改了相同的文件的同个地方
	git fetch  拉远端代码
	git merge  合并-会提示失败,在冲突的文件中会显示各方的冲突代码
	vi		   手动编辑合并代码
	git commit 提交
	git push   推送到远端
	
另一人修改了文件名，本地开发人员修改了同个文件的内容
	git pull   拉远端代码，如果有冲突 尝试自动merge（等同于先fetch再merge）
	git commit 提交
	git push   推送到远端
	
多人修改了相同文件的文件名
	git pull  拉远端代码，如果有冲突 尝试自动merge
	提示冲突，并在本地保留各方的命名的新文件
	git rm 文件名  删除掉不需要的文件
	git commit 提交
	git push   推送到远端
	

git集成使用禁忌
	禁止使用 git push -f 
		防止有人本地reset --hard或者删除了大量代码，然后强制同步到远端仓库
	
	禁止对公共分支变基
		会导致其他push失败，要做大量工作重新合并代码
	
	


github
	github A分支合并到master的3种方式
	creat a merge commit	将A分支合并到master分支
	squash and merge		将A分支的所有提交合并为一个提交，在master上提交；A分支的状态不变。
	rebase and merge    	将A分支的所有提交在master上提交；A分支的状态不变。
	
	github 多分支合并时冲突：  
	creat a merge commit 和 squash and merge 在多分支合并到主分支冲突时，只要在github页面手动处理冲突再提交，继续合并即可。
	rebase and merge ，当主分支上后续有多次提交，A在分支上也有多次提交时，且2个分支存在冲突时候，此时A分支rebase到时会合并失败。
			因为冲突之后的多次提交，如果都与主分支有冲突，那么要在git命令行rebase多次处理多次冲突，在github上再rebase and merge。
			（更好的方式 可以参考git官方文档 rerere 命令）
			

gitlab
一、合并请求（MERGE REQUEST）

合并请求是GitLab中最基本的分支合并策略，它让合并代码变得简单且透明。

创建与审查: 开发者在自己的特性分支上开发新功能或修复问题后，通过创建一个合并请求来开始代码审查过程。合并请求将展示两个分支间的差异，并允许其他成员对代码进行评论和讨论。

持续集成: GitLab强大的CI/CD功能允许在合并请求中设置自动化脚本运行测试、构建和其他检查。这确保了代码合并前通过所有必要的质量保障措施。

二、快进合并（FAST-FORWARD MERGE）

快进合并是在没有冲突的情况下使用的一种简单合并策略。

无冲突场景: 如果“特性分支”在“主分支”基础上进行开发，且“主分支”在此期间没有新的提交，快进合并可直接将“主分支”指针移动到“特性分支”的最新提交。

保持历史线性: 使用快进合并可以使项目历史保持线性，方便追溯每次提交的变化。但在多人同时工作时，可能需要频繁地从主分支拉取更新。

三、三向合并（THREE-WAY MERGE）

三向合并用于处理两个分支在合并基点之后都有改动的情况，它以三个提交为基础：两个分支的最新提交和共同的祖先提交。

解决冲突: 在三向合并中，GitLab会尝试自动合并差异，但如果两个分支涉及到相同文件的同一部分，则需要手动解决冲突。

合并提交: 一旦冲突解决，GitLab会创建一个新的合并提交，它包含两个分支所有改动，并将其添加到目标分支。

四、变基合并（REBASE BEFORE MERGING）

变基是一种先进的合并策略，它可以将一系列提交从一个分支转移到另一个分支的基础上。

提交重排: 变基合并涉及修改特性分支的提交，使其看起来像是在目标分支的最新提交之后进行的提交。

维护清晰历史: 当使用变基合并，特性分支的更改在历史中将排在主分支更改之后，这有助于维护项目历史的清晰和连贯。但这种方法可能会导致复杂的合并冲突，特别是在多人协作时。

git原理
从根本上来讲 Git 是一个内容寻址（content-addressable）文件系统，并在此之上提供了一个版本控制系统的用户界面。

底层命令和高层命令

.git/目录
	HEAD
	config
	description
	hooks/
	info/
	objects/
	refs/
	logs/
	
	
	description 文件仅供 GitWeb 程序使用，无需关心。
	
	
	
Git 的核心部分是一个简单的键值对数据库（key-value data store）。你可以向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。
	
git对象
位于 .git/objects/目录
	

.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4

一个文件对应一条内容，以该内容加上特定头部信息一起的 SHA-1 校验和为文件命名。
校验和的前两个字符用于命名子目录，余下的 38 个字符则用作文件名。


cat-file命令 查看git文件系统中的数据 

-p 自动判断内容的类型并显示内容
git cat-file -p d67046

-t 显示该git对象的类型（tree, commit, blob）	
git cat-file -t d67046


blob object
在这个（简单的版本控制）系统中，文件名并没有被保存——我们仅保存了文件的内容。上述类型的对象我们称之为blob


tree object
解决文件名保存的问题，也允许我们将多个文件组织到一起。
假设有3个树对象分别，代表了我们想要跟踪的不同项目快照。然而问题依旧：若想重用这些快照，你必须记住所有三个 SHA-1 哈希值。
并且，你也完全不知道是谁保存了这些快照，在什么时刻保存的，以及为什么保存这些快照。而以上这些，正是提交对象（commit object）能为你保存的基本信息。

commit object
每次我们运行 git add 和 git commit 命令时， Git 所做的实质工作——将被改写的文件保存为数据对象，更新暂存区，记录树对象，最后创建一个指明了顶层树对象和父提交的提交对象。
这三种主要的 Git 对象——数据对象、树对象、提交对象——最初均以单独文件的形式保存在 .git/objects 目录下。


对象存储